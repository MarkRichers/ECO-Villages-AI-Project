@page "/fetchdata"

@using Blazor1.Data
@using C1.Chart
@using ChartJs
@using System.Collections;




@using C1.Blazor.Chart
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }

           
        </tbody>
        
    </table>
   <FlexChart ItemsSource="forecasts" BindingX="Date" Class="chart" ChartType="ChartType.Bar">
     <SeriesCollection>
           <Series Binding="TemperatureC" />
     </SeriesCollection>
      <AxisCollection>
       @* <Axis AxisType="AxisType.X" Position="Position.Bottom" AxisLine="false" Format="MMM-d" MajorTickMarks="TickMark.None"/>*@
       <Axis AxisType="AxisType.X" Position="Position.Bottom" Title="Temperature, C"/>

        <Axis AxisType="AxisType.Y" Position="Position.Left"  AxisLine="false" MajorTickMarks="TickMark.None" MajorGrid="true"/>
    </AxisCollection>
</FlexChart>  


}   

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);



    }


}
